pipeline {
    	agent any
	
	options {
		// parallelsAlwaysFailFast()
		// Keep the 10 most recent builds
		buildDiscarder(logRotator(numToKeepStr:'10'))
	}
	environment {
		GIT_URL = 'git@github.com:ivanlevsky/stand-alone-complex-tomato.git'
	}
	tools {
		// Install the Maven version configured as "M3" and add it to the path.
		maven "M3"
	}
        stages {
		stage('Git Checkout') {
			steps {
				checkout([
					$class: 'GitSCM',
					branches: [[name: '*/master']],
					extensions: [
						// [$class: 'SparseCheckoutPaths', sparseCheckoutPaths:[[path:'src/']]],
						// [$class: 'RelativeTargetDirectory', relativeTargetDir:'test_folder']
                    ],
					],
					userRemoteConfigs: [
						[
						    //https git clone
						    //url: 'https://github.com/ivanlevsky/stand-alone-complex-tomato.git'

						    //ssh git clone
						    credentialsId: 'jenkins-ssh-key',
						    url: "$GIT_URL"
						]
					]
				])
			}
		}

		stage('continue run build when time past 12.am'){
		    steps{
			timeout(time: 1, unit: 'MINUTES') {
			    	waitUntil(initialRecurrencePeriod: 15000, queit: false) {
					script {
						def current_time = sh(script: 'date +"%H%M%S"', returnStdout: true).trim()
						return Integer.valueOf("$current_time") > 120000
					}
				}
			}
		    }
		}
		
		stage('Build Project') {
		    steps {
			sh 'cp ./test\\ file/cicd/pom.xml  ./'
			sh 'cp ./test\\ file/cicd/testng.xml  ./'
			sh 'mvn -B -DskipTests clean package'
		    }
		}

		stage('Test') {
			steps {
				sh 'mvn clean test'
			}
			post {
				always {
					junit 'target/surefire-reports/*.xml'
					xunit (
						thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],
						tools: [ JUnit(pattern: 'target/surefire-reports/TEST-*.xml') ]
					)
					testNG(reportFilenamePattern: 'target/surefire-reports/*.xml')
					allure([
					    includeProperties: false,
					    jdk: '',
					    properties: [],
					    reportBuildPolicy: 'ALWAYS',
					    results: [[path: 'target/allure-results']]
					])
				}
				success {
					echo 'I succeeded!'
					mail to: 'zhou_zhiqi@hoperun.com',
							subject: "Success Pipeline: ${currentBuild.fullDisplayName}",
							body: "Something is wrong with ${env.BUILD_URL}"
				}
				unstable {
					echo 'I am unstable :/'
				}

				failure {
					echo 'I failed :('
				}

				changed {
					echo 'Things were different before...'
				}
			}

		}

    }
}
